
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract task3_2 {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;

    struct taskList {
        string taskName;
        uint32 time;
        bool isDone;    
    }

    mapping (int8=>taskList) taskListId;
    string[] total;
    

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
        
    }

    // Updates variable `timestamp` with current blockchain time.
    function touch() external {
        // Each function that accepts external message must check that
        // message is correctly signed.
        require(msg.pubkey() == tvm.pubkey(), 102);
        // Tells to the TVM that we accept this message.
        tvm.accept();
        // Update timestamp
        timestamp = now;
    }

    function sendValue(address dest, uint128 amount, bool bounce) public view {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        // It allows to make a transfer with arbitrary settings
        dest.transfer(amount, bounce, 0);
    }

    	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    function addTask(int8 _id, string _taskName, bool _isDone) public checkOwnerAndAccept{

        taskList task = taskList(_taskName, now, _isDone);

        taskListId[_id] = task;

        total.push(_taskName);
    }

    function getCount() public view returns(uint256) {
        return total.length;
    }

    function getTaskList() public view returns(string[]){
        return total;
    }

    function getTask(int8 id) public view returns(string, uint32, bool) {
        string _taskName = taskListId[id].taskName;
        uint32 _time = taskListId[id].time;
        bool _isDone = taskListId[id].isDone;

        return (_taskName, _time, _isDone);
    }


    function taskDone(int8 id) public checkOwnerAndAccept{
        taskListId[id].isDone = true;
    }

    function removeTask(int8 id) public checkOwnerAndAccept{
        delete taskListId[id];
        total.pop();
    }
}
