
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
import "gameObject.sol";

// This is class that describes you smart contract.
contract militaryUnit is gameObject{

    uint public tvmPubkey;
    uint public  msgPubkey;

    address public msgAddress;  // income address

    int public powerAttacked;
    int public powerProtected;

    int public healthAttacked;

    int public powerAttacking;
    int public powerProtecting;

    int public healthAttacking;
    
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();


    }

    function getValuesAttacking(int _powerAttacking, int _powerProtecting, int _healthAttacking) public override{
        tvm.accept();
        tvmPubkey = tvm.pubkey();
        msgPubkey = msg.pubkey();

        msgAddress = msg.sender;
        powerAttacking = _powerAttacking;
        powerProtecting = _powerProtecting;
        healthAttacking = _healthAttacking;
    }

    function getValuesAttacked(int _powerAttacked, int _powerProtected, int _healthAttacked) public override{
        tvm.accept();
        tvmPubkey = tvm.pubkey();
        msgPubkey = msg.pubkey();

        msgAddress = msg.sender;
        powerAttacked = _powerAttacked;
        powerProtected = _powerProtected;
        healthAttacked = _healthAttacked;
    }


    function attack(address addressAttacked) public override{
        tvm.accept();

        healthAttacked = healthAttacked - (powerAttacking - powerProtected);

        if (healthAttacked <= 0) {
            death();
        }
    }

    function death() public {
        tvm.accept();
        msg.sender.transfer(0, false, 160);
    }
} 